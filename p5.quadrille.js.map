{"version":3,"file":"p5.quadrille.js","sources":["src/p5.quadrille.js"],"sourcesContent":["'use strict';\n\nimport p5 from 'p5';\n\n// TODOs\n// i. isPolyomino()\n// ii. perlin / simplex noise\n// iii. sort() using 'webgl' mode, requires using fbos to speed up sample() (which currently only supports 'p2d' renderer)\n// iv. screenRow and screenCol lacks webgl mode (would require p5.treegl)\n// v. Decide mouseCornerX, mouseCornerY, screenCornerX() and screenCornerY()\nclass Quadrille {\n  // STYLE\n\n  /**\n   * Default text color.\n   */\n  static _textColor = 'DodgerBlue';\n\n  // Getter for textColor\n  static get textColor() {\n    return this._textColor;\n  }\n\n  // Setter for textColor with simplified type checking\n  static set textColor(value) {\n    this._textColor = typeof value === 'string' || this.isColor(value) ? value : this._textColor;\n  }\n\n  /**\n   * Default text drawing zoom.\n   */\n  static _textZoom = 0.78; // TODO decide was 0.89 in p5-v1+\n\n  // Getter for textZoom\n  static get textZoom() {\n    return this._textZoom;\n  }\n\n  // Setter for textZoom with type checking\n  static set textZoom(value) {\n    this._textZoom = (typeof value === 'number' && value > 0) ? value : this._textZoom;\n  }\n\n  /**\n   * Default drawing outline.\n   */\n  static _outline = 'OrangeRed';\n\n  // Getter for outline\n  static get outline() {\n    return this._outline;\n  }\n\n  // Setter for outline with type checking\n  static set outline(value) {\n    this._outline = typeof value === 'string' || this.isColor(value) ? value : this._outline;\n  }\n\n  /**\n   * Default drawing outline weight.\n   */\n  static _outlineWeight = 2;\n\n  // Getter for outlineWeight\n  static get outlineWeight() {\n    return this._outlineWeight;\n  }\n\n  // Setter for outlineWeight with type checking\n  static set outlineWeight(value) {\n    this._outlineWeight = (typeof value === 'number' && value >= 0) ? value : this._outlineWeight;\n  }\n\n  /**\n   * Default drawing cell length.\n   */\n  static _cellLength = 100;\n\n  // Getter for cellLength\n  static get cellLength() {\n    return this._cellLength;\n  }\n\n  // Setter for cellLength with type checking\n  static set cellLength(value) {\n    this._cellLength = (typeof value === 'number' && value > 0) ? value : this._cellLength;\n  }\n\n  /**\n   * Default background used in sort.\n   */\n  static _background = 'white';\n\n  // Getter for background\n  static get background() {\n    return this._background;\n  }\n\n  // Setter for background with type checking\n  static set background(value) {\n    this._background = typeof value === 'string' || this.isColor(value) ? value : this._background;\n  }\n\n  // chess specific stuff\n\n  /**\n  * Default chess dark squares.\n  */\n  static _darkSquare = '#D28C45'; // Wikipedia; '#769555' // chess.com\n\n  // Getter for darkSquare\n  static get darkSquare() {\n    return this._darkSquare;\n  }\n\n  // Setter for darkSquare with type checking\n  static set darkSquare(value) {\n    this._darkSquare = typeof value === 'string' || this.isColor(value) ? value : this._darkSquare;\n  }\n\n  /**\n   * Default chess light squares.\n   */\n  static _lightSquare = '#FDCDAA'; // Wikipedia; '#EBECCF' // chess.com\n\n  // Getter for lightSquare\n  static get lightSquare() {\n    return this._lightSquare;\n  }\n\n  // Setter for lightSquare with type checking\n  static set lightSquare(value) {\n    this._lightSquare = typeof value === 'string' || this.isColor(value) ? value : this._lightSquare;\n  }\n\n  static chessSymbols = {\n    K: '♔', Q: '♕', R: '♖', B: '♗', N: '♘', P: '♙',\n    k: '♚', q: '♛', r: '♜', b: '♝', n: '♞', p: '♟'\n  };\n\n  static chessKeys = Object.fromEntries(\n    Object.entries(this.chessSymbols).map(([k, v]) => [v, k])\n  );\n\n  static setChessSymbols(chessSymbols) {\n    this.chessSymbols = chessSymbols;\n    this.chessKeys = Object.fromEntries(\n      Object.entries(chessSymbols).map(([k, v]) => [v, k])\n    );\n  }\n\n  /**\n   * Logical AND between two quadrilles.\n   * @param {Quadrille} q1 First quadrille\n   * @param {Quadrille} q2 Second quadrille\n   * @param {number} row Relative row offset from q1\n   * @param {number} col Relative column offset from q1\n   * @returns {Quadrille} A new quadrille containing only cells filled in both q1 and q2\n   */\n  static and(q1, q2, row, col) {\n    return this.merge(q1, q2, (a, b) => {\n      if (this.isFilled(a) && this.isFilled(b)) {\n        return a;\n      }\n    }, row, col);\n  }\n\n  /**\n   * Logical OR between two quadrilles.\n   * @param {Quadrille} q1 First quadrille\n   * @param {Quadrille} q2 Second quadrille\n   * @param {number} row Relative row offset from q1\n   * @param {number} col Relative column offset from q1\n   * @returns {Quadrille} A new quadrille containing cells filled in either q1 or q2\n   */\n  static or(q1, q2, row, col) {\n    return this.merge(q1, q2, (a, b) => {\n      if (this.isFilled(a)) {\n        return a;\n      }\n      if (this.isFilled(b)) {\n        return b;\n      }\n    }, row, col);\n  }\n\n  /**\n   * Logical XOR between two quadrilles.\n   * @param {Quadrille} q1 First quadrille\n   * @param {Quadrille} q2 Second quadrille\n   * @param {number} row Relative row offset from q1\n   * @param {number} col Relative column offset from q1\n   * @returns {Quadrille} A new quadrille containing cells filled in one, but not both, of q1 and q2\n   */\n  static xor(q1, q2, row, col) {\n    return this.merge(q1, q2, (a, b) => {\n      if (this.isFilled(a) && this.isEmpty(b)) {\n        return a;\n      }\n      if (this.isEmpty(a) && this.isFilled(b)) {\n        return b;\n      }\n    }, row, col);\n  }\n\n  /**\n   * Logical difference (q1 minus q2) between two quadrilles.\n   * @param {Quadrille} q1 First quadrille\n   * @param {Quadrille} q2 Second quadrille\n   * @param {number} row Relative row offset from q1\n   * @param {number} col Relative column offset from q1\n   * @returns {Quadrille} A new quadrille with cells filled in q1 but not in q2\n   */\n  static diff(q1, q2, row, col) {\n    return this.merge(q1, q2, (a, b) => {\n      if (this.isFilled(a) && this.isEmpty(b)) {\n        return a;\n      }\n    }, row, col);\n  }\n\n  /**\n   * Logical NEG of a quadrille: fills empty cells with a target value.\n   * @param {Quadrille} q Input quadrille\n   * @param {*} target Value to fill where the quadrille is empty\n   * @returns {Quadrille} A new quadrille with empty cells filled and filled cells untouched\n   */\n  static neg(q, target) {\n    const result = new Quadrille(q._p, q.width, q.height);\n    this.isFilled(target) && q.visit(({ row, col }) => result.fill(row, col, target), this.isEmpty);\n    return result;\n  }\n\n  /**\n   * Merges two quadrilles by applying a binary logic operator to their overlapping cells.\n   * @param {Quadrille} q1 First quadrille\n   * @param {Quadrille} q2 Second quadrille\n   * @param {Function} operator Function receiving two cell values and returning a result value\n   * @param {number} row Relative row offset from q1 to q2\n   * @param {number} col Relative column offset from q1 to q2\n   * @returns {Quadrille} A new quadrille resulting from the logic combination of q1 and q2\n   */\n  static merge(q1, q2, operator, row, col) {\n    const sameOrigin = q1._row !== undefined && q2._row !== undefined &&\n      q1._cellLength !== undefined && q1._cellLength === q2._cellLength;\n    row ??= sameOrigin ? q2._row - q1._row : 0;\n    col ??= sameOrigin ? q2._col - q1._col : 0;\n    const width = col < 0 ? Math.max(q2.width, q1.width - col) : Math.max(q1.width, q2.width + col);\n    const height = row < 0 ? Math.max(q2.height, q1.height - row) : Math.max(q1.height, q2.height + row);\n    const quadrille = new Quadrille(q1._p, width, height);\n    quadrille.visit(({ row: i, col: j }) => {\n      const i1 = row < 0 ? i + row : i;\n      const j1 = col < 0 ? j + col : j;\n      const i2 = row > 0 ? i - row : i;\n      const j2 = col > 0 ? j - col : j;\n      const value1 = q1.read(i1, j1);\n      const value2 = q2.read(i2, j2);\n      quadrille.fill(i, j, operator(value1, value2));\n    });\n    return quadrille;\n  }\n\n  /**\n   * Constructs either an empty or a filled quadrille:\n   * 1. Pass no params.\n   * 2. Pass width and height to construct and empty quadrille (filled with null's).\n   * 3. Pass two colors (either p5.Color instances or HTML color strings) to construct an 8x8 chessboard pattern\n   * using the specified colors for light and dark squares.\n   * 4. Pass jagged array (of colors, images, graphics, arrays, objects, strings, numbers and null).\n   * 5. Pass array (of colors, images, graphics arrays, objects, strings, numbers and null).\n   * 6. Pass width and array (of colors, images, graphics arrays, objects, strings, numbers and null).\n   * 7. Pass fen.\n   * 8. Pass string.\n   * 9. Pass width and string.\n   * 10. Pass width and image, to construct a quadrille filled with image.\n   * 11. Pass width, image and boolean, to construct a quadrille from pixalated image.\n   * 12. Pass width, height, order and value, to construct a quadrille filled with value of the given order.\n   * 13. Pass width, BigInt (or int) and value, to construct a quadrille filled with value from the given BigInt.\n   * @see rand\n   * @see order\n   */\n  constructor(p, ...args) {\n    this._p = p;\n    // TODO decide hack (doesn't work for mouseRow and mouseCol properties in inheritance classes)\n    // this._p = p || p5.prototype; // defaults to p5.prototype if p is not passed\n    this._cellLength = this.constructor.cellLength;\n    this._x = 0;\n    this._y = 0;\n    this._origin = 'corner';\n    if (args.length === 0) {\n      this._memory2D = Array(8).fill().map(() => Array(8).fill(null));\n      this.visit(({ row, col }) => {\n        const fill = (row + col) % 2 === 0\n          ? this.constructor.lightSquare\n          : this.constructor.darkSquare;\n        this._memory2D[row][col] = this._p.color(fill);\n      });\n      return;\n    }\n    if (args.length === 1) {\n      this.memory2D = args[0];\n      return;\n    }\n    if (args.length === 2 &&\n      (this.constructor.isColor(args[0]) || typeof args[0] === 'string') &&\n      (this.constructor.isColor(args[1]) || typeof args[1] === 'string')) {\n      this._memory2D = Array(8).fill().map(() => Array(8).fill(null));\n      this.visit(({ row, col }) => {\n        const fill = (row + col) % 2 === 0 ? args[0] : args[1];\n        this._memory2D[row][col] = this._p.color(fill);\n      });\n      return;\n    }\n    if (args.length === 2 && typeof args[0] === 'number') {\n      if (typeof args[1] === 'string') {\n        this._init1D([...args[1]], args[0]);\n        return;\n      }\n      if (Array.isArray(args[1])) {\n        this._init1D(args[1], args[0]);\n        return;\n      }\n    }\n    if (args.length === 2 && typeof args[0] === 'number' && typeof args[1] === 'number') {\n      this._memory2D = Array(args[1]).fill().map(() => Array(args[0]).fill(null));\n      return;\n    }\n    if (args.length === 2 && typeof args[0] === 'number' && typeof args[1] !== 'number') {\n      this._memory2D = Array(Math.round(args[0] * args[1].height / args[1].width))\n        .fill().map(() => Array(args[0]).fill(null));\n      this._fromImage(args[1]);\n      return;\n    }\n    if (args.length === 3 && typeof args[0] === 'number' && typeof args[1] !== 'number' && typeof args[2] === 'boolean') {\n      this._memory2D = Array(Math.round(args[0] * args[1].height / args[1].width))\n        .fill().map(() => Array(args[0]).fill(null));\n      this._fromImage(args[1], args[2]);\n      return;\n    }\n    if (args.length === 3 && typeof args[0] === 'number' &&\n      (typeof args[1] === 'number' || typeof args[1] === 'bigint')) {\n      const rows = Number((BigInt(args[1].toString(2).length) + BigInt(args[0]) - 1n) / BigInt(args[0]));\n      this._memory2D = Array(rows).fill().map(() => Array(args[0]).fill(null));\n      this._fromBigInt(args[1], args[2]);\n      return;\n    }\n    if (args.length === 4 &&\n      typeof args[0] === 'number' &&\n      typeof args[1] === 'number' &&\n      typeof args[2] === 'number') {\n      this._memory2D = Array(args[1]).fill().map(() => Array(args[0]).fill(null));\n      this.rand(args[2], args[3]);\n      return;\n    }\n  }\n\n  _init1D(memory1D, width = memory1D.length) {\n    const height = Math.ceil(memory1D.length / width);\n    this._memory2D = Array.from({ length: height }, (_, i) => {\n      const start = i * width;\n      return this._format(memory1D.slice(start, start + width), width);\n    });\n  }\n\n  _format(memory1D, size) {\n    const cleaned = memory1D.map(v => v === undefined ? null : v);\n    return cleaned.length < size\n      ? cleaned.concat(new Array(size - cleaned.length).fill(null))\n      : cleaned;\n  }\n\n  _fromBigInt(...args) {\n    const [input, value] = args;\n    const length = this.width * this.height;\n    if ((typeof input === 'number' || typeof input === 'bigint') && this.constructor.isFilled(value)) {\n      const bigint = BigInt(input);\n      if (bigint < 0n) {\n        throw new Error('Value cannot be negative');\n      }\n      if (bigint.toString(2).length > length) {\n        throw new Error('Value is too high to fill quadrille');\n      }\n      let index = 0;\n      for (const { row, col } of this) {\n        (bigint & (1n << BigInt(length - 1 - index))) && this.fill(row, col, value);\n        index++;\n      }\n    }\n  }\n\n  _fromFEN(...args) {\n    if (typeof args[0] === 'string') {\n      if (args[0].split('/').length - 1 === 7) {\n        const [placement] = args[0].split(' ');\n        this._memory2D = Array(8).fill().map(() => Array(8).fill(null));\n        const rows = placement.split('/');\n        for (let i = 0; i < 8; i++) {\n          let col = 0;\n          for (const char of rows[i]) {\n            if (isNaN(char)) {\n              this._memory2D[i][col] = this.constructor.chessSymbols[char];\n              col++;\n            } else {\n              col += parseInt(char);\n            }\n          }\n        }\n      }\n    }\n  }\n\n  _fromImage(...args) {\n    if (this.constructor.isImage(args[0])) {\n      let src = args[0] instanceof p5.Framebuffer ? args[0].get() : args[0];\n      if (src instanceof p5.MediaElement && src.elt instanceof HTMLVideoElement) {\n        const video = src.elt;\n        if (video.readyState < HTMLMediaElement.HAVE_CURRENT_DATA) {\n          video.addEventListener('loadeddata', () => this._fromImage(...args)); // Retry once the video is loaded\n          return;\n        }\n        src = new p5.Image(video.videoWidth, video.videoHeight);\n        src.drawingContext.drawImage(video, 0, 0, video.videoWidth, video.videoHeight); // Draw video frame to p5.Image\n      }\n      const image = new p5.Image(src.width, src.height);\n      image.copy(src, 0, 0, src.width, src.height, 0, 0, src.width, src.height);\n      args.length === 1 ? this._images(image) : args[1] ? this._pixelator1(image) : this._pixelator2(image);\n    }\n  }\n\n  _pixelator1(image) {\n    image.resize(this.width, this.height);\n    image.loadPixels();\n    for (let i = 0; i < image.pixels.length / 4; i++) {\n      const r = image.pixels[4 * i];\n      const g = image.pixels[4 * i + 1];\n      const b = image.pixels[4 * i + 2];\n      const a = image.pixels[4 * i + 3];\n      const _ = this._fromIndex(i);\n      this.fill(_.row, _.col, this._p.color([r, g, b, a]));\n    }\n  }\n\n  _pixelator2(image) {\n    image.loadPixels();\n    const r = Array(this.height).fill().map(() => Array(this.width).fill(0));\n    const g = Array(this.height).fill().map(() => Array(this.width).fill(0));\n    const b = Array(this.height).fill().map(() => Array(this.width).fill(0));\n    const a = Array(this.height).fill().map(() => Array(this.width).fill(0));\n    const t = Array(this.height).fill().map(() => Array(this.width).fill(0));\n    for (let i = 0; i < image.pixels.length / 4; i++) {\n      const _ = this._fromIndex(i, image.width);\n      const _i = Math.floor(_.row * this.height / image.height);\n      const _j = Math.floor(_.col * this.width / image.width);\n      r[_i][_j] += image.pixels[4 * i];\n      g[_i][_j] += image.pixels[4 * i + 1];\n      b[_i][_j] += image.pixels[4 * i + 2];\n      a[_i][_j] += image.pixels[4 * i + 3];\n      t[_i][_j] += 1;\n    }\n    this.visit(({ row, col }) => {\n      this.fill(row, col, this._p.color([\n        r[row][col] / t[row][col],\n        g[row][col] / t[row][col],\n        b[row][col] / t[row][col],\n        a[row][col] / t[row][col]\n      ]));\n    });\n  }\n\n  _images(image) {\n    const cellWidth = image.width / this.width;\n    const cellHeight = image.height / this.height;\n    this.visit(({ row, col }) => this.fill(row, col, image.get(col * cellWidth, row * cellHeight, cellWidth, cellHeight)));\n  }\n\n  /**\n   * Sets quadrille from 2D memory internal array representation.\n   */\n  set memory2D(memory) {\n    // Case: FEN or flat string\n    if (typeof memory === 'string') {\n      const isFEN = memory.split('/').length - 1 === 7;\n      isFEN ? this._fromFEN(memory) : this._init1D([...memory]);\n      return;\n    }\n    // Case: 1D array\n    if (Array.isArray(memory) && !Array.isArray(memory[0])) {\n      this._init1D(memory);\n      return;\n    }\n    // Case: 2D array\n    if (Array.isArray(memory)) {\n      const memory2D = memory.map(row => {\n        if (!Array.isArray(row)) throw new Error('Not 2D Array');\n        return row.slice(); // shallow copy\n      });\n      // Compute max row length\n      const width = Math.max(...memory2D.map(row => row.length));\n      // Normalize all rows\n      this._memory2D = memory2D.map(row => this._format(row, width));\n    }\n  }\n\n  /**\n   * @returns {Array} Quadrille matrix (Array2D) representation.\n   */\n  get memory2D() {\n    return this.clone(false)._memory2D;\n  }\n\n  /**\n   * Sets quadrille width (number of columns).\n   */\n  set width(width) {\n    this.transpose();\n    this.height = width;\n    this.transpose();\n  }\n\n  /**\n   * @returns {number} quadrille width, i.e., number of columns.\n   */\n  get width() {\n    return this._memory2D[0].length;\n  }\n\n  /**\n   * Sets quadrille height (number of rows).\n   */\n  set height(height) {\n    height = Math.max(1, Math.abs(height));\n    const rows = height - this.height;\n    while (this.height !== height) {\n      rows > 0 ? this.insert(this.height) : this.delete(this.height - 1);\n    }\n  }\n\n  /**\n   * @returns {number} quadrille height, i.e., number of rows.\n   */\n  get height() {\n    return this._memory2D.length;\n  }\n\n  /**\n   * @returns {number} width * height.\n   */\n  get size() {\n    return this.width * this.height;\n  }\n\n  /**\n   * @returns {number} Number of non-empty quadrille cells.\n   */\n  get order() {\n    let result = 0;\n    this.visit(() => result++, this.constructor.isFilled);\n    return result;\n    // also possible\n    // return [...this.cells({ value: Quadrille.isFilled })].length;\n  }\n\n  get mouseRow() {\n    return this.screenRow(this._p.mouseY);\n  }\n\n  get mouseCol() {\n    return this.screenCol(this._p.mouseX);\n  }\n\n  /*\n  get mouseCornerX() {\n    return this.screenCornerX(this._p.mouseX);\n  }\n\n  get mouseCornerY() {\n    return this.screenCornerY(this._p.mouseY);\n  }\n\n  screenCornerX(pixelX, x = this._x || 0, cellLength = this._cellLength || this.constructor.cellLength) {\n    return this.screenCol(pixelX, x, cellLength) * cellLength + (this._origin === 'center' ? this._p.width / 2 : x);\n  }\n\n  screenCornerY(pixelY, y = this._y || 0, cellLength = this._cellLength || this.constructor.cellLength) {\n    return this.screenRow(pixelY, y, cellLength) * cellLength + (this._origin === 'center' ? this._p.height / 2 : y);\n  }\n  // */\n\n  /**\n   * Converts a pixel Y coordinate to a quadrille row index.\n   * @param {number} pixelY - The screen Y-coordinate in pixels.\n   * @param {number} [y=this._y || 0] - The quadrille's Y-coordinate origin.\n   * @param {number} [cellLength=this._cellLength || this.constructor.cellLength] - Length of each cell.\n   * @returns {number} The row index corresponding to the pixel Y-coordinate.\n   */\n  screenRow(pixelY, y = this._y || 0, cellLength = this._cellLength || this.constructor.cellLength) {\n    return this._p.floor((pixelY - (this._origin === 'center' ? this._p.height / 2 : y)) / cellLength);\n  }\n\n  /**\n   * Converts a screen X-coordinate to a quadrille column index.\n   * @param {number} pixelX - The screen X-coordinate in pixels.\n   * @param {number} [x=this._x || 0] - The quadrille's X-coordinate origin.\n   * @param {number} [cellLength=this._cellLength || this.constructor.cellLength] - Length of each cell.\n   * @returns {number} - The corresponding quadrille column.\n   */\n  screenCol(pixelX, x = this._x || 0, cellLength = this._cellLength || this.constructor.cellLength) {\n    return this._p.floor((pixelX - (this._origin === 'center' ? this._p.width / 2 : x)) / cellLength);\n  }\n\n  /**\n   * Lazily iterates in row-major order (top to bottom, left to right) over all matching cells in the quadrille.\n   *\n   * The optional `filter` can be:\n   * - `null` or omitted → yield all cells\n   * - A `function(value)` → yield cells where the function returns `true`\n   * - An `Array` or `Set` of values → yield cells whose value is in the set\n   * - An object with optional `value`, `row`, and/or `col` predicates:\n   *    {\n   *      value: v => v === 1,\n   *      row: r => r % 2 === 0,\n   *      col: c => c < 4\n   *    }\n   *\n   * @generator\n   * @param {Array|Set|function|object|null} [filter=null] Filter for selecting cells\n   * @yields {{ row: number, col: number, value: any }} Cell object with coordinates and value\n   */\n  *cells(filter = null) {\n    const isFn = typeof filter === 'function';\n    const isSet = filter && !isFn && !filter.value && !filter.row && !filter.col;\n    const isObj = filter && typeof filter === 'object' && (filter.value || filter.row || filter.col);\n    const set = isSet ? new Set(filter) : null;\n    for (let row = 0; row < this._memory2D.length; row++) {\n      const rowData = this._memory2D[row];\n      for (let col = 0; col < rowData.length; col++) {\n        const value = rowData[col];\n        const match = !filter\n          || (isFn && filter(value))\n          || (isSet && set.has(value))\n          || (isObj &&\n            (!filter.value || filter.value(value)) &&\n            (!filter.row || filter.row(row)) &&\n            (!filter.col || filter.col(col)));\n        if (match) yield { row, col, value };\n      }\n    }\n  }\n\n  /**\n   * Default iterator for the quadrille.\n   *\n   * Allows iteration over all cells using `for...of`.\n   * Equivalent to `this.cells()` with no filter.\n   *\n   * @generator\n   * @returns {IterableIterator<{ row: number, col: number, value: any }>}\n   */\n  *[Symbol.iterator]() {\n    yield* this.cells();\n  }\n\n  /**\n   * Iterates over cells using `for...of`, calling the given function with each cell object.\n   * @param {function({row:number, col:number, value:any}):void} callback\n   * @param {Array|Set|function|object} [filter] Optional filter for selecting cells\n   */\n  visit(callback, filter) {\n    for (const cell of this.cells(filter)) {\n      callback(cell);\n    }\n  }\n\n  /**\n   * @param {number} row \n   * @returns row as a new quadrille\n   */\n  row(row) {\n    if (this.isValid(row, 0)) {\n      return new Quadrille(this._p, this._memory2D[row]);\n    }\n  }\n\n  _fromIndex(index, width = this.width) {\n    return { row: (index / width) | 0, col: index % width };\n  }\n\n  _toIndex(row, col, width = this.width) {\n    return row * width + col;\n  }\n\n  /**\n   * @returns {bigint} integer representation using big-endian and row-major ordering\n   * of the quadrille cells.\n   */\n  toBigInt() {\n    let result = 0n;\n    this.visit(({ row, col }) => {\n      result += 2n ** (BigInt(this.width) * BigInt(this.height - row) - (BigInt(col) + 1n));\n    }, this.constructor.isFilled);\n    return result;\n  }\n\n  /**\n   * @returns {Array} Quadrille representation.\n   */\n  toArray() {\n    return this._memory2D.flat(); // requires ES2019\n    // TODO need to verify which ES version will p5-v2 support\n    // return this.cells().map(({ value }) => value);\n  }\n\n  /**\n   * Convert this quadrille to an image.\n   * @param {String} filename png or jpg\n   * @param {Object} params drawing params\n   */\n  toImage(filename, {\n    values,\n    textFont,\n    origin = 'corner',\n    options = {},\n    tileDisplay = this.constructor.tileDisplay,\n    functionDisplay = this.constructor.functionDisplay,\n    imageDisplay = this.constructor.imageDisplay,\n    colorDisplay = this.constructor.colorDisplay,\n    stringDisplay = this.constructor.stringDisplay,\n    numberDisplay = this.constructor.numberDisplay,\n    arrayDisplay,\n    objectDisplay,\n    cellLength = this._cellLength || this.constructor.cellLength,\n    outlineWeight = this.constructor.outlineWeight,\n    outline = this.constructor.outline,\n    textColor = this.constructor.textColor,\n    textZoom = this.constructor.textZoom\n  } = {}) {\n    const graphics = this._p.createGraphics(this.width * cellLength, this.height * cellLength, this._mode);\n    this._p.drawQuadrille(this, {\n      graphics, values, tileDisplay, functionDisplay, imageDisplay, colorDisplay, stringDisplay,\n      numberDisplay, arrayDisplay, objectDisplay, cellLength, outlineWeight, outline, textColor,\n      textZoom, textFont, origin, options\n    });\n    this._p.save(graphics, filename);\n  }\n\n  /**\n   * @returns quadrille chess board position in FEN notation\n   */\n  toFEN() {\n    if (this.width !== 8 || this.height !== 8) {\n      console.warn('toFEN() only works on 8x8 chess boards');\n      return;\n    }\n    let fen = '';\n    for (let i = 0; i < 8; i++) {\n      let emptySquares = 0;\n      for (let j = 0; j < 8; j++) {\n        const value = this._memory2D[i][j];\n        if (this.constructor.isEmpty(value)) {\n          emptySquares++;\n        } else {\n          if (emptySquares > 0) {\n            fen += emptySquares.toString();\n            emptySquares = 0;\n          }\n          const fenKey = this.constructor.chessKeys[value];\n          if (!fenKey) {\n            console.warn(`Unrecognized piece ${value} at position ${i}, ${j}. FEN output may be incorrect.`);\n            fen += '?'; // Placeholder for unrecognized pieces\n          } else {\n            fen += fenKey;\n          }\n        }\n      }\n      if (emptySquares > 0) {\n        fen += emptySquares.toString();\n      }\n      if (i < 7) {\n        fen += '/';\n      }\n    }\n    return fen;\n  }\n\n  /**\n   * @param {number} row.\n   * @returns {number} Number of non-empty quadrille cells at row.\n   */\n  magnitude(row) {\n    let result = 0;\n    if (this.isValid(row, 0)) {\n      for (let j = 0; j < this.width; j++) {\n        this.isFilled(row, j) && result++;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Returns a shallow copy of this quadrille. May be used in conjunction with\n   * {@link reflect} and {@link rotate} to create different quadrille instances.\n   */\n  clone(cache = true) {\n    const clone = new Quadrille(this._p, this._memory2D.map(array => array.slice()));\n    if (cache) {\n      clone._cellLength = this._cellLength;\n      clone._x = this._x;\n      clone._y = this._y;\n      clone._col = this._col;\n      clone._row = this._row;\n    }\n    return clone;\n  }\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @param {number} dimension of ring\n   * @returns Quadrille ring of neighbor cells centered at (row, col).\n   */\n  ring(row, col, dimension = 1) {\n    const array1D = [];\n    for (let i = -dimension; i <= dimension; i++) {\n      for (let j = -dimension; j <= dimension; j++) {\n        array1D.push(this.read(row + i, col + j));\n      }\n    }\n    return new Quadrille(this._p, 2 * dimension + 1, array1D);\n  }\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {*} quadrille entry or undefined id (row, col) is out of bounds\n   */\n  read(row, col) {\n    if (this.isValid(row, col)) {\n      return this._memory2D[row][col];\n    }\n  }\n\n  // Static \"protected\" methods\n\n  // Although undefined is disallowed, isEmpty and isFilled use it for querying cells outside\n  // quadrille bounds, also isFilled is logically equivalent to !isEmpty for consistency.\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {boolean} true if cell is within bounds\n   */\n  isValid(row, col) {\n    return row >= 0 && row < this.height && col >= 0 && col < this.width;\n  }\n\n  static isEmpty(value) {\n    return value == null;\n  }\n\n  static isFilled(value) {\n    return value != null;\n  }\n\n  static isNumber(value) {\n    return typeof value === 'number';\n  }\n\n  static isString(value) {\n    return typeof value === 'string';\n  }\n\n  static isColor(value) {\n    return value instanceof p5.Color;\n  }\n\n  static isFunction(value) {\n    return typeof value === 'function';\n  }\n\n  static isImage(value) {\n    return value instanceof p5.Image || (value instanceof p5.MediaElement && value.elt instanceof HTMLVideoElement) || value instanceof p5.Graphics || value instanceof p5.Framebuffer;\n  }\n\n  static isArray(value) {\n    return Array.isArray(value);\n  }\n\n  static isObject(value) {\n    return this.isFilled(value) &&\n      !this.isColor(value) &&\n      !this.isImage(value) &&\n      !this.isArray(value) &&\n      !this.isFunction(value) &&\n      typeof value === 'object';\n  }\n\n  // Instance methods:\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {boolean} true if cell is empty\n   */\n  isEmpty(row, col) {\n    return this.constructor.isEmpty(this.read(row, col));\n  }\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {boolean} true if cell is filled\n   */\n  isFilled(row, col) {\n    return this.constructor.isFilled(this.read(row, col));\n  }\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {boolean} true if cell has a number\n   */\n  isNumber(row, col) {\n    return this.constructor.isNumber(this.read(row, col));\n  }\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {boolean} true if cell has a string\n   */\n  isString(row, col) {\n    return this.constructor.isString(this.read(row, col));\n  }\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {boolean} true if cell has a color\n   */\n  isColor(row, col) {\n    return this.constructor.isColor(this.read(row, col));\n  }\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {boolean} true if cell has an array\n   */\n  isArray(row, col) {\n    return this.constructor.isArray(this.read(row, col));\n  }\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {boolean} true if cell has an object\n   */\n  isObject(row, col) {\n    return this.constructor.isObject(this.read(row, col));\n  }\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {boolean} true if cell has an image\n   */\n  isImage(row, col) {\n    return this.constructor.isImage(this.read(row, col));\n  }\n\n  /**\n   * @param {number} row \n   * @param {number} col \n   * @returns {boolean} true if cell has a function\n   */\n  isFunction(row, col) {\n    return this.constructor.isFunction(this.read(row, col));\n  }\n\n  /**\n   * Pattern searching.\n   * @param {Quadrille} pattern \n   * @param {boolean} strict tells whether the algorithm requires values to match (besides filled cells)\n   * @returns an array of { row, col } object literals hits whose length may be 0 (no hits found).\n   */\n  search(pattern, strict = false) {\n    const hits = [];\n    this.visit(({ row, col }) =>\n      this.constructor.merge(pattern, this, (q1, q2) => {\n        if (this.constructor.isFilled(q1) && (strict ? q2 !== q1 : this.constructor.isEmpty(q2))) {\n          return q1;\n        }\n      }, -row, -col).order === 0 && hits.push({ row, col }));\n    return hits;\n  }\n\n  /**\n   * Searches and replace values. Either:\n   * 1. replace(value), replaces non empty cells with value.\n   * 2. replace(value1, value2), searches value1 and replaces with value2\n   */\n  replace(...args) {\n    args.length === 1 && this.visit(({ row, col }) => this.fill(row, col, args[0]), this.constructor.isFilled);\n    args.length === 2 && this.visit(({ row, col }) => this.fill(row, col, args[1]), v => v === args[0]);\n    return this;\n  }\n\n  /**\n   * Clear quadrille cells (fill them with null's). Either:\n   * 1. clear(), clears current filled cells;\n   * 2. clear(row), clears row; or,\n   * 3. clear(row, col), clears cell.\n   * 4. clear(row, col, directions), flood clearing using (row, col) cell value.\n   * 5. clear(row, col, border), flood clearing (including borders) using (row, col) cell value.\n   * 6. clear(row, col, directions, border), flood clearing (including borders) using (row, col) cell value.\n   */\n  clear(...args) {\n    if (args.length === 0) {\n      this._memory2D = this._memory2D.map(row => row.map(cell => this._clearCell(cell)));\n    }\n    if (args.length === 1 && typeof args[0] === 'number') {\n      if (this.isValid(args[0], 0)) {\n        this._memory2D[args[0]] = this._memory2D[args[0]].map(cell => this._clearCell(cell));\n      }\n    }\n    if (args.length === 2 && typeof args[0] === 'number' && typeof args[1] === 'number') {\n      if (this.isValid(args[0], args[1])) {\n        this._memory2D[args[0]][args[1]] = this._clearCell(this._memory2D[args[0]][args[1]]);\n      }\n    }\n    if (args.length === 3 && typeof args[0] === 'number' && typeof args[1] === 'number' &&\n      typeof args[2] === 'number') {\n      if (this.isValid(args[0], args[1])) {\n        this._flood(args[0], args[1], this._memory2D[args[0]][args[1]], null, args[2]);\n      }\n    }\n    if (args.length === 3 && typeof args[0] === 'number' && typeof args[1] === 'number' &&\n      typeof args[2] === 'boolean') {\n      if (this.isValid(args[0], args[1])) {\n        this._flood(args[0], args[1], this._memory2D[args[0]][args[1]], null, 4, args[2]);\n      }\n    }\n    if (args.length === 4 && typeof args[0] === 'number' && typeof args[1] === 'number' &&\n      typeof args[2] === 'number' && typeof args[3] === 'boolean') {\n      if (this.isValid(args[0], args[1])) {\n        this._flood(args[0], args[1], this._memory2D[args[0]][args[1]], null, args[2], args[3]);\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Fills quadrille cells with given value. Either:\n   * 1. fill(), chess board pattern filling of all cells.\n   * 2. fill(value), fills current empty cells.\n   * 3. fill(color1, color2), fills the entire quadrille with a chessboard pattern using the specified colors\n   * (either p5.Color instances or HTML color strings).\n   * 4. fill(row, value), fills row.\n   * 5. fill(row, col, value), fills cell.\n   * 6. fill(row, col, value, directions), flood filling without boder in the given number of directions,\n   * using (row, col) cell value (either a p5.Image, a p5.Graphics, a p5.Color, a 4-length color array,\n   * an object, a string or a number).\n   * 7. fill(row, col, value, border), flood filling with (without) border in 4 directions using (row, col)\n   * cell value (either a p5.Image, a p5.Graphics, a p5.Color, a 4-length color array, an object, a string or a number).\n   * 8. fill(row, col, value, directions, border), flood filling with (without) border in the given number of directions\n   * using (row, col) cell value (either a  p5.Image, a p5.Graphics, a p5.Color, a 4-length color array, an object,\n   * a string or a number).\n   */\n  fill(...args) {\n    if (args.length === 0) {\n      this.visit(({ row, col }) => {\n        this._memory2D[row][col] = this._clearCell(this._memory2D[row][col]);\n        this._memory2D[row][col] = this._p.color((row + col) % 2 === 0 ? this.constructor.lightSquare : this.constructor.darkSquare);\n      });\n    }\n    if (args.length === 1 && this.constructor.isFilled(args[0])) {\n      this.visit(({ row, col }) => this._memory2D[row][col] = args[0], this.constructor.isEmpty);\n    }\n    if (args.length === 2 && (this.constructor.isColor(args[0]) || typeof args[0] === 'string') &&\n      (this.constructor.isColor(args[1]) || typeof args[1] === 'string')) {\n      this.visit(({ row, col }) => {\n        this._memory2D[row][col] = this._clearCell(this._memory2D[row][col]);\n        this._memory2D[row][col] = (row + col) % 2 === 0 ? this._p.color(args[0]) : this._p.color(args[1]);\n      });\n    }\n    if (args.length === 2 && typeof args[0] === 'number') {\n      if (this.isValid(args[0], 0)) {\n        this._memory2D[args[0]] = this._memory2D[args[0]].map(cell => {\n          cell = this._clearCell(cell);\n          return args[1] === undefined ? null : args[1];\n        });\n      }\n    }\n    if (args.length === 3 && typeof args[0] === 'number' && typeof args[1] === 'number') {\n      if (this.isValid(args[0], args[1])) {\n        this._memory2D[args[0]][args[1]] = this._clearCell(this._memory2D[args[0]][args[1]]);\n        this._memory2D[args[0]][args[1]] = args[2] === undefined ? null : args[2];\n      }\n    }\n    if (args.length === 4 && typeof args[0] === 'number' && typeof args[1] === 'number' && typeof args[3] === 'number') {\n      if (this.isValid(args[0], args[1])) {\n        this._flood(args[0], args[1], this._memory2D[args[0]][args[1]], args[2] === undefined ? null : args[2], args[3]);\n      }\n    }\n    if (args.length === 4 && typeof args[0] === 'number' && typeof args[1] === 'number' && typeof args[3] === 'boolean') {\n      if (this.isValid(args[0], args[1])) {\n        this._flood(args[0], args[1], this._memory2D[args[0]][args[1]], args[2] === undefined ? null : args[2], 4, args[3]);\n      }\n    }\n    if (args.length === 5 && typeof args[0] === 'number' && typeof args[1] === 'number' && typeof args[3] === 'number' && typeof args[4] === 'boolean') {\n      if (this.isValid(args[0], args[1])) {\n        this._flood(args[0], args[1], this._memory2D[args[0]][args[1]], args[2] === undefined ? null : args[2], args[3], args[4]);\n      }\n    }\n    return this;\n  }\n\n  _flood(row, col, value1, value2, directions = 4, border = false) {\n    if (directions !== 4 && directions !== 8) {\n      console.warn(`flood fill is using 4 directions instead of ${directions}, see: https://en.m.wikipedia.org/wiki/Flood_fill`);\n      directions = 4;\n    }\n    if (this.isValid(row, col) && this._memory2D[row][col] !== value2) {\n      if (this._memory2D[row][col] === value1) {\n        this._memory2D[row][col] = this._clearCell(this._memory2D[row][col]);\n        this._memory2D[row][col] = value2;\n        this._flood(row, col - 1, value1, value2, directions, border);\n        this._flood(row - 1, col, value1, value2, directions, border);\n        this._flood(row, col + 1, value1, value2, directions, border);\n        this._flood(row + 1, col, value1, value2, directions, border);\n        if (directions === 8) {\n          this._flood(row - 1, col - 1, value1, value2, directions, border);\n          this._flood(row - 1, col + 1, value1, value2, directions, border);\n          this._flood(row + 1, col + 1, value1, value2, directions, border);\n          this._flood(row + 1, col - 1, value1, value2, directions, border);\n        }\n      }\n      if (border) {\n        this._memory2D[row][col] = this._clearCell(this._memory2D[row][col]);\n        this._memory2D[row][col] = value2;\n      }\n    }\n  }\n\n  _clearCell(value) {\n    if (this.constructor.isFunction(value)) {\n      value.fbo?.remove();\n      value.fbo = undefined;\n    }\n    return null;\n  }\n\n  /**\n   * Randomly clears or fills cells in the quadrille.\n   *\n   * - If `value` is `null`, clears `times` filled cells.\n   * - If `value` is not `null`, fills `times` empty cells with `value`.\n   *\n   * Note: For deterministic behavior, call `randomSeed(seed)` explicitly before this method.\n   *\n   * @param {number} times - Number of cells to modify.\n   * @param {*} [value=null] - Value to fill, or `null` to clear cells.\n   * @returns {Quadrille} The modified quadrille (for chaining).\n   */\n  rand(times, value = null) {\n    times = this._p.abs(times);\n    const isFilling = this.constructor.isFilled(value);\n    const max = isFilling ? this.size - this.order : this.order;\n    times = this._p.min(times, max);\n    let count = 0;\n    while (count < times) {\n      const index = this._p.int(this._p.random(this.size));\n      const { row, col } = this._fromIndex(index);\n      const shouldChange = isFilling ? this.isEmpty(row, col) : this.isFilled(row, col);\n      if (shouldChange) {\n        isFilling ? this.fill(row, col, value) : this.clear(row, col);\n        count++;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Randomly rearranges filled cells in the quadrille.\n   *\n   * Note: For deterministic behavior, call `randomSeed(seed)` explicitly before this method.\n   *\n   * @returns {Quadrille} The modified quadrille (for chaining).\n   */\n  randomize() {\n    const clone = this.clone(false);\n    this.clear();\n    clone.visit(({ value }) => {\n      let row, col;\n      do {\n        const index = this._p.int(this._p.random(this.size));\n        ({ row, col } = this._fromIndex(index));\n      } while (this.isFilled(row, col));\n      this.fill(row, col, value);\n    }, this.constructor.isFilled);\n    return this;\n  }\n\n  /**\n   * Inserts an empty row.\n   * @param {number} row \n   */\n  insert(row) {\n    this._memory2D.splice(row, 0, Array(this.width).fill(null));\n    return this;\n  }\n\n  /**\n   * Deletes the given row.\n   * @param {number} row \n   */\n  delete(row) {\n    if (this.height > 1 && this.isValid(row, 0)) {\n      this._memory2D.splice(row, 1);\n    }\n    return this;\n  }\n\n  /**\n   * Swaps two rows or two cells in the quadrille.\n   *\n   * - `swap(row1, row2)` swaps two rows.\n   * - `swap(row1, col1, row2, col2)` swaps two individual cells.\n   *\n   * @param  {...number} args - Either 2 or 4 integers.\n   * @returns {Quadrille} The quadrille (for chaining).\n   */\n  swap(...args) {\n    const isInteger = Number.isInteger;\n    if (args.length === 2) {\n      if (args.every(isInteger) && this.isValid(args[0], 0) && this.isValid(args[1], 0)) {\n        const temp = this._memory2D[args[0]];\n        this._memory2D[args[0]] = this._memory2D[args[1]];\n        this._memory2D[args[1]] = temp;\n      }\n    } else if (args.length === 4) {\n      if (args.every(isInteger) && this.isValid(args[0], args[1]) && this.isValid(args[2], args[3])) {\n        const temp = this._memory2D[args[0]][args[1]];\n        this._memory2D[args[0]][args[1]] = this._memory2D[args[2]][args[3]];\n        this._memory2D[args[2]][args[3]] = temp;\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Horizontal reflection.\n   */\n  reflect() {\n    this._memory2D.reverse();\n    return this;\n  }\n\n  /**\n   * Transpose the quadrille.\n   */\n  transpose() {\n    // credit goes to Fawad Ghafoorwho wrote about it here:\n    // https://stackoverflow.com/questions/17428587/transposing-a-2d-array-in-javascript\n    this._memory2D = this._memory2D[0].map((_, i) => this._memory2D.map(row => row[i]));\n    return this;\n  }\n\n  /**\n   * π/2 clockwise rotation.\n   */\n  rotate() {\n    // credit goes to Nitin Jadhav: https://github.com/nitinja who wrote about it here:\n    // https://stackoverflow.com/questions/15170942/how-to-rotate-a-matrix-in-an-array-in-javascript/58668351#58668351\n    this._memory2D = this._memory2D[0].map((_, i) => this._memory2D.map(row => row[i]).reverse());\n    return this;\n  }\n\n  /**\n   * Convolutes this quadrille against the quadrille kernel mask. kernel weights\n   * may be encoded within the quadrille mask, both numerically or using colors.\n   * Luma is used in the latter case to convert colors to weights. Forms:\n   * 1. filter(mask) convolutes the whole quadrille or,\n   * 2. filter(mask, i, j) convolutes the whole quadrille at i, j. Both i and j\n   * should be greater or equal than the mask half_size which is computed as:\n   * (mask.width - 1) / 2).\n   * @params {Quadrille} nxn (n is odd) quadrille convolution kernel mask.\n   * @param {number} row if undefined convolutes the whole quadrille\n   * @param {number} col if undefined convolutes the whole quadrille\n   */\n  filter(mask, row, col) {\n    if (mask.size % 2 === 1 && mask.width === mask.height && this.size >= mask.size) {\n      const half_size = (mask.width - 1) / 2;\n      if (row === undefined || col === undefined) {\n        const source = this.clone();\n        this.visit(\n          ({ row, col }) => this._conv(mask, row, col, half_size, source),\n          {\n            row: r => r >= half_size && r < this.height - half_size,\n            col: c => c >= half_size && c < this.width - half_size\n          }\n        );\n      }\n      else if (row >= half_size && row < this.height - half_size && col >= half_size && col < this.width - half_size) {\n        this._conv(mask, row, col, half_size);\n      }\n    }\n    return this;\n  }\n\n  _conv(mask, row, col, cache_half_size = (mask.width - 1) / 2, source = this) {\n    let r = 0;\n    let g = 0;\n    let b = 0;\n    let apply;\n    for (let imask = 0; imask < mask.height; imask++) {\n      for (let jmask = 0; jmask < mask.width; jmask++) {\n        const i = row + imask - cache_half_size;\n        const j = col + jmask - cache_half_size;\n        const neighbor = source.read(i, j);\n        let mask_value = mask.read(imask, jmask);\n        if (this.constructor.isColor(neighbor) && (typeof mask_value === 'number' || this.constructor.isColor(mask_value))) {\n          apply = true;\n          const weight = typeof mask_value === 'number'\n            ? mask_value\n            : 0.299 * this._p.red(mask_value) + 0.587 * this._p.green(mask_value) + 0.114 * this._p.blue(mask_value);\n          r += this._p.red(neighbor) * weight;\n          g += this._p.green(neighbor) * weight;\n          b += this._p.blue(neighbor) * weight;\n        }\n      }\n    }\n    if (apply) {\n      r = this._p.constrain(r, 0, 255);\n      g = this._p.constrain(g, 0, 255);\n      b = this._p.constrain(b, 0, 255);\n      this.fill(row, col, this._p.color(r, g, b));\n    }\n  }\n\n  /**\n   * Colorize the (row0, col0), (row1, col1), (row2, col2) triangle, according to\n   * color0, color1 and color2 colors (either p5.Color, arrays or strings), respectively.\n   */\n  colorizeTriangle(row0, col0, row1, col1, row2, col2, color0, color1 = color0, color2 = color0) {\n    this.rasterizeTriangle(row0, col0, row1, col1, row2, col2,\n      ({ array: xyza }) => this._p.color(xyza),\n      [this._p.red(color0), this._p.green(color0), this._p.blue(color0), this._p.alpha(color0)],\n      [this._p.red(color1), this._p.green(color1), this._p.blue(color1), this._p.alpha(color1)],\n      [this._p.red(color2), this._p.green(color2), this._p.blue(color2), this._p.alpha(color2)]\n    );\n  }\n\n  /**\n   * Colorize quadrille according to upper-left corner color0, bottom-left corner color1,\n   * upper-right corner color2, and bottom-right corner color3 colors.\n   */\n  colorize(color0, color1 = color0, color2 = color0, color3 = color0) {\n    this.colorizeTriangle(0, 0, this.height - 1, 0, 0, this.width - 1, color0, color1, color2);\n    this.colorizeTriangle(this.height - 1, 0, 0, this.width - 1, this.height - 1, this.width - 1, color1, color2, color3);\n  }\n\n  /**\n   * Rasterize the (row0, col0), (row1, col1), (row2, col2) triangle\n   * according to array0, array1 and array2 object vertex data (resp),\n   * using (fragment) shader.\n   */\n  rasterizeTriangle(row0, col0, row1, col1, row2, col2, shader, array0, array1 = array0, array2 = array0) {\n    if (Array.isArray(array0) && Array.isArray(array1) && Array.isArray(array2)) {\n      this.visit(({ row, col }) => {\n        const coords = this._barycentric_coords(row, col, row0, col0, row1, col1, row2, col2);\n        // interpolate all array attributes for the current cell only if it is inside the triangle\n        if (coords.w0 >= 0 && coords.w1 >= 0 && coords.w2 >= 0) {\n          const length = Math.max(array0.length, array1.length, array2.length);\n          const array = new Array(length);\n          for (let k = 0; k < array.length; k++) {\n            array[k] = (array0[k] ?? 0) * coords.w0 + (array1[k] ?? 0) * coords.w1 + (array2[k] ?? 0) * coords.w2;\n          }\n          // call shader using the interpolated arrays to compute the current cell contents\n          this.fill(row, col, shader({ array, row, col }));\n        }\n      });\n    }\n    return this;\n  }\n\n  /**\n   * Rasterize quadrille according to upper-left corner vertex array0,\n   * bottom-left corner vertex array1, upper-right corner vertex array2,\n   * and bottom-right corner vertex array3, using (fragment) shader.\n   */\n  rasterize(shader, array0, array1 = array0, array2 = array0, array3 = array0) {\n    this.rasterizeTriangle(0, 0, this.height - 1, 0, 0, this.width - 1, shader, array0, array1, array2);\n    this.rasterizeTriangle(this.height - 1, 0, 0, this.width - 1, this.height - 1, this.width - 1, shader, array1, array2, array3);\n  }\n\n  /**\n   * Returns the (row0, col0), (row1, col1), (row2, col2) triangle\n   * barycentric coordinates at (row, col) as the {w0, w1, w2} object literal.\n   */\n  _barycentric_coords(row, col, row0, col0, row1, col1, row2, col2) {\n    const edges = this._edge_functions(row, col, row0, col0, row1, col1, row2, col2);\n    const area = this._parallelogram_area(row0, col0, row1, col1, row2, col2);\n    return { w0: edges.e12 / area, w1: edges.e20 / area, w2: edges.e01 / area };\n  }\n\n  /**\n   * Returns the parallelogram signed area spawn by the\n   * (row0, col0), (row1, col1), (row2, col2) triangle.\n   */\n  _parallelogram_area(row0, col0, row1, col1, row2, col2) {\n    return (col1 - col0) * (row2 - row0) - (col2 - col0) * (row1 - row0);\n  }\n\n  /**\n   * Returns the (row0, col0), (row1, col1), (row2, col2) triangle edge_functions\n   * at (row, col) as the {e01, e12, e20} object literal.\n   */\n  _edge_functions(row, col, row0, col0, row1, col1, row2, col2) {\n    const e01 = (row0 - row1) * col + (col1 - col0) * row + (col0 * row1 - row0 * col1);\n    const e12 = (row1 - row2) * col + (col2 - col1) * row + (col1 * row2 - row1 * col2);\n    const e20 = (row2 - row0) * col + (col0 - col2) * row + (col2 * row0 - row2 * col0);\n    return { e01, e12, e20 };\n  }\n\n  /**\n   * Sort cells according to their coloring. Modes are: 'LUMA', 'AVG' and 'DISTANCE' (to a given target).\n   */\n  sort({\n    mode = 'LUMA',\n    target = this.constructor.outline,\n    ascending = true,\n    textColor = this.constructor.textColor,\n    textZoom = this.constructor.textZoom,\n    background = this.constructor.background,\n    cellLength = this._p.int(this._p.max(this._p.width / this.width, this._p.height / this.height) / 10),\n    outlineWeight = this.constructor.outlineWeight,\n    outline = this.constructor.outline,\n    textFont,\n    origin = 'corner',\n    options = {},\n    imageDisplay = this.constructor.imageDisplay,\n    colorDisplay = this.constructor.colorDisplay,\n    stringDisplay = this.constructor.stringDisplay,\n    numberDisplay = this.constructor.numberDisplay,\n    arrayDisplay = this.constructor.arrayDisplay,\n    objectDisplay = this.constructor.objectDisplay,\n    functionDisplay = this.constructor.functionDisplay,\n    tileDisplay = this.constructor.tileDisplay\n  } = {}) {\n    let memory1D = this.toArray();\n    const params = {\n      background, cellLength, textColor, textZoom, imageDisplay, colorDisplay, outline, textFont, origin, options,\n      outlineWeight, stringDisplay, numberDisplay, arrayDisplay, objectDisplay, functionDisplay, tileDisplay,\n      renderer: 'p2d' // renderer: this._mode // kills machine in webgl!\n    };\n    switch (mode) {\n      case 'DISTANCE':\n        memory1D.sort((valueA, valueB) => {\n          params.value = valueA;\n          const sa = this.constructor.sample({ ...params, value: valueA });\n          const sb = this.constructor.sample({ ...params, value: valueB });\n          const wa = Math.sqrt(\n            Math.pow((sa.r / sa.total) - this._p.red(target), 2) +\n            Math.pow((sa.g / sa.total) - this._p.green(target), 2) +\n            Math.pow((sa.b / sa.total) - this._p.blue(target), 2) +\n            Math.pow((sa.a / sa.total) - this._p.alpha(target), 2)\n          );\n          const wb = Math.sqrt(\n            Math.pow((sb.r / sb.total) - this._p.red(target), 2) +\n            Math.pow((sb.g / sb.total) - this._p.green(target), 2) +\n            Math.pow((sb.b / sb.total) - this._p.blue(target), 2) +\n            Math.pow((sb.a / sb.total) - this._p.alpha(target), 2)\n          );\n          return wa - wb;\n        });\n        break;\n      case 'AVG':\n        memory1D.sort((valueA, valueB) => {\n          const sa = this.constructor.sample({ ...params, value: valueA });\n          const sb = this.constructor.sample({ ...params, value: valueB });\n          const wa = 0.333 * sa.r + 0.333 * sa.g + 0.333 * sa.b;\n          const wb = 0.333 * sb.r + 0.333 * sb.g + 0.333 * sb.b;\n          return wa - wb;\n        });\n        break;\n      case 'LUMA':\n      default:\n        memory1D.sort((valueA, valueB) => {\n          const sa = this.constructor.sample({ ...params, value: valueA });\n          const sb = this.constructor.sample({ ...params, value: valueB });\n          const wa = 0.299 * sa.r + 0.587 * sa.g + 0.114 * sa.b;\n          const wb = 0.299 * sb.r + 0.587 * sb.g + 0.114 * sb.b;\n          return wa - wb;\n        });\n        break;\n    }\n    this._init1D(memory1D = ascending ? memory1D : memory1D.reverse(), this.width);\n    return this;\n  }\n\n  /**\n   * Sample cell using background as the {r, g, b, a, total} object literal.\n   */\n  static sample({\n    value,\n    textFont,\n    origin = 'corner',\n    options = {},\n    renderer = 'p2d',\n    imageDisplay = this.constructor.imageDisplay,\n    colorDisplay = this.constructor.colorDisplay,\n    stringDisplay = this.constructor.stringDisplay,\n    numberDisplay = this.constructor.numberDisplay,\n    arrayDisplay = this.constructor.arrayDisplay,\n    objectDisplay = this.constructor.objectDisplay,\n    functionDisplay = this.constructor.functionDisplay,\n    tileDisplay = this.constructor.tileDisplay,\n    background = this.constructor.background,\n    cellLength = this.constructor.cellLength,\n    outlineWeight = this.constructor.outlineWeight,\n    outline = this.constructor.outline,\n    textColor = this.constructor.textColor,\n    textZoom = this.constructor.textZoom\n  } = {}) {\n    const graphics = createGraphics(cellLength, cellLength, renderer);\n    graphics.background(background);\n    const params = {\n      graphics, value, textColor, textZoom, outline, outlineWeight, cellLength, textFont, origin, options,\n      imageDisplay, colorDisplay, stringDisplay, numberDisplay, arrayDisplay, objectDisplay, functionDisplay, tileDisplay\n    };\n    this._display(params);\n    graphics.loadPixels();\n    let r = 0, g = 0, b = 0, a = 0;\n    const total = graphics.pixels.length / 4;\n    for (let i = 0; i < total; i++) {\n      r += graphics.pixels[4 * i];\n      g += graphics.pixels[4 * i + 1];\n      b += graphics.pixels[4 * i + 2];\n      a += graphics.pixels[4 * i + 3];\n    }\n    graphics.updatePixels();\n    return { r, g, b, a, total };\n  }\n\n  static _display(params) {\n    const handlers = [\n      { check: this.isFunction.bind(this), display: params.functionDisplay },\n      { check: this.isImage.bind(this), display: params.imageDisplay },\n      { check: this.isColor.bind(this), display: params.colorDisplay },\n      { check: this.isNumber.bind(this), display: params.numberDisplay },\n      { check: this.isString.bind(this), display: params.stringDisplay },\n      { check: this.isArray.bind(this), display: params.arrayDisplay },\n      { check: this.isObject.bind(this), display: params.objectDisplay }\n    ];\n    for (const handler of handlers) {\n      if (handler.check(params.value) && handler.display) {\n        handler.display.call(this, params);\n        break;\n      }\n    }\n    if (params.tileDisplay) {\n      params.tileDisplay.call(this, params);\n    }\n  }\n\n  /**\n   * Number cell drawing.\n   */\n  static numberDisplay({\n    graphics,\n    value,\n    cellLength = this.cellLength\n  } = {}) {\n    this.colorDisplay({ graphics, value: graphics.color(graphics.constrain(value, 0, 255)), cellLength });\n  }\n\n  /**\n   * Color cell drawing.\n   */\n  static colorDisplay({\n    graphics,\n    value,\n    cellLength = this.cellLength\n  } = {}) {\n    graphics.noStroke();\n    graphics.fill(value);\n    graphics.rect(0, 0, cellLength, cellLength);\n  }\n\n  static functionDisplay({\n    graphics,\n    options,\n    value,\n    cellLength = this.cellLength,\n  } = {}) {\n    const fbo = value.fbo ?? (value.fbo = graphics.createFramebuffer({ width: cellLength, height: cellLength }));\n    const pg = fbo.graphics ?? (fbo.graphics = graphics);\n    fbo.begin();\n    pg._rendererState = pg.push();\n    (options?.origin === 'corner' && pg.translate(-cellLength / 2, -cellLength / 2));\n    value.call(pg, options);\n    pg.pop(pg._rendererState);\n    fbo.end();\n    this.imageDisplay({ graphics, cellLength, value: fbo });\n  }\n\n  /**\n   * Image cell drawing.\n   */\n  static imageDisplay({\n    graphics,\n    value,\n    cellLength = this.cellLength\n  } = {}) {\n    const img = value instanceof p5.Framebuffer\n      ? (value.graphics ||= graphics) !== graphics\n        ? (console.debug('fbo reformat needed'), value.get())\n        : value\n      : value;\n    graphics.noStroke();\n    graphics.image(img, 0, 0, cellLength, cellLength);\n  }\n\n  /**\n   * String cell drawing.\n   */\n  static stringDisplay({\n    graphics,\n    value,\n    textFont,\n    cellLength = this.cellLength,\n    textColor = this.textColor,\n    textZoom = this.textZoom\n  } = {}) {\n    textFont && graphics.textFont(textFont)\n    graphics.noStroke();\n    graphics.fill(textColor);\n    graphics.textSize(cellLength * textZoom / value.length);\n    // TODO p5v2 decide how to go here:\n    graphics.textAlign(graphics.CENTER, graphics.CENTER);\n    //graphics.textAlign(p5.prototype.CENTER, p5.prototype.CENTER);\n    graphics.text(value, 0, 0, cellLength, cellLength);\n  }\n\n  /**\n   * Tesselation or tiling.\n   */\n  static tileDisplay({\n    graphics,\n    cellLength = this.cellLength,\n    outline = this.outline,\n    outlineWeight = this.outlineWeight\n  } = {}) {\n    if (outlineWeight !== 0) {\n      graphics.noFill();\n      graphics.stroke(outline);\n      graphics.strokeWeight(outlineWeight);\n      graphics.quad(0, 0, cellLength, 0, cellLength, cellLength, 0, cellLength);\n    }\n  }\n}\n\n// Export the Quadrille class as the default export\nexport default Quadrille;\n\n// p5-specific functions (not wrapped in an IIFE in the common source)\n\nconst INFO =\n{\n  LIBRARY: 'p5.quadrille.js',\n  VERSION: '3.0.0-beta.1',\n  HOMEPAGE: 'https://github.com/objetos/p5.quadrille.js'\n};\n\nconsole.log(INFO);\n\np5.prototype.createQuadrille = function (...args) {\n  return new Quadrille(this, ...args);\n}\n\np5.prototype.drawQuadrille = function (quadrille, {\n  graphics = this,\n  x,\n  y,\n  row,\n  col,\n  filter,\n  textFont,\n  origin,\n  options = {},\n  functionDisplay = quadrille.constructor.functionDisplay,\n  imageDisplay = quadrille.constructor.imageDisplay,\n  colorDisplay = quadrille.constructor.colorDisplay,\n  stringDisplay = quadrille.constructor.stringDisplay,\n  numberDisplay = quadrille.constructor.numberDisplay,\n  tileDisplay = quadrille.constructor.tileDisplay,\n  arrayDisplay = quadrille.constructor.arrayDisplay,\n  objectDisplay = quadrille.constructor.objectDisplay,\n  cellLength = quadrille.constructor.cellLength,\n  outlineWeight = quadrille.constructor.outlineWeight,\n  outline = quadrille.constructor.outline,\n  textColor = quadrille.constructor.textColor,\n  textZoom = quadrille.constructor.textZoom\n} = {}) {\n  quadrille._mode = (graphics._renderer instanceof p5.RendererGL) ? 'webgl' : 'p2d';\n  // Warn: here we align with p5 conventions\n  // https://p5js.org/learn/getting-started-in-webgl-coords-and-transform.html\n  origin ??= quadrille._mode === 'webgl' ? 'center' : 'corner';\n  quadrille._origin = origin;\n  options.origin ??= quadrille._mode === 'webgl' ? 'center' : 'corner'; // options.origin ??= origin; // other option\n  quadrille._cellLength = cellLength;\n  quadrille._x = x ? x : col ? col * cellLength : 0;\n  quadrille._y = y ? y : row ? row * cellLength : 0;\n  quadrille._col = Number.isInteger(col) ? col : Number.isInteger(quadrille._x / cellLength) ? quadrille._x / cellLength : undefined;\n  quadrille._row = Number.isInteger(row) ? row : Number.isInteger(quadrille._y / cellLength) ? quadrille._y / cellLength : undefined;\n  graphics.push();\n  quadrille._mode === 'webgl' ? (origin === 'corner' && graphics.translate(-graphics.width / 2, -graphics.height / 2)) :\n    (origin === 'center' && graphics.translate(graphics.width / 2, graphics.height / 2))\n  graphics.translate(quadrille._x, quadrille._y);\n  quadrille.visit(({ row, col, value }) => {\n    graphics.push();\n    graphics.translate(col * cellLength, row * cellLength);\n    options.row = row;\n    options.col = col;\n    const params = {\n      quadrille, graphics, value, width: quadrille.width, height: quadrille.height,\n      row, col, outline, outlineWeight, cellLength, textColor, textZoom, textFont, origin, options, functionDisplay,\n      imageDisplay, colorDisplay, stringDisplay, numberDisplay, arrayDisplay, objectDisplay, tileDisplay\n    };\n    quadrille.constructor._display(params);\n    graphics.pop();\n  }, filter);\n  graphics.pop();\n}\n\np5.prototype.visitQuadrille = function (quadrille, fx, filter) {\n  quadrille.visit(({ row, col }) => fx(row, col), filter);\n}"],"names":[],"mappings":"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"}